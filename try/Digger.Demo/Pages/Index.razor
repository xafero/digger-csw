@page "/"

@using System.Timers
@using DiggerDemo.Core
@using SkiaSharp.Views.Blazor
@using Dig = DiggerClassic.Core.Digger;
@using Timer = System.Timers.Timer

<SKGLView Width="1024px" Height="1024px" @ref="_form" />

@code {
	private static WebDigger _web;
	private SKGLView _form;
	private Dig _game;
	private Timer _timer;

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_web = new WebDigger(null) { _canvas = _form };
			_form.IgnorePixelScaling = true;
			_form.EnableRenderLoop = false;
			_form.OnPaintSurface = _web.PaintSurface;

			_game = new Dig(_web);
			_web._digger = _game;
			_web.SetFocusable();
			_game.Init();
			_game.Start();

			_timer = new Timer(250);
			_timer.Elapsed += NotifyTimerElapsed;
			_timer.Enabled = true;
		}
	}

	private async void NotifyTimerElapsed(object _, ElapsedEventArgs e)
	{
		_timer.Enabled = false;
		await _web._digger.RunAsync();
	}

	[JSInvokable]
	public static void OnKeyUp(KeyboardEventArgs e)
	{
		var code = TranslateKey(e.Key);
		if (code == null) return;
		_web.KeyUp(code.Value);
	}

	[JSInvokable]
	public static void OnKeyDown(KeyboardEventArgs e)
	{
		var code = TranslateKey(e.Key);
		if (code == null) return;
		_web.KeyDown(code.Value);
	}

	private static int? TranslateKey(string key)
	{
		switch (key)
		{
			case "ArrowLeft": return AppletCompat.Key_Left;
			case "ArrowRight": return AppletCompat.Key_Right;
			case "ArrowUp": return AppletCompat.Key_Up;
			case "ArrowDown": return AppletCompat.Key_Down;
			case "Control": return AppletCompat.Key_F1;
			case "Escape": return AppletCompat.Key_F10;
			case "+": return AppletCompat.Key_Plus;
			case "-": return AppletCompat.Key_Minus;
		}
		if (key.Length == 1) return key[0];
		return null;
	}
}
